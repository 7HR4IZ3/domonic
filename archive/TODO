### custom tags
TODO - test/document making custom tag?.
```python
class anything(tag):
    def __init__(self, *args, **kwargs):
        super().__init__( args, kwargs )
```

# TODO - more utils for common things?
# TODO - <!DOCTYPE html> needs injecting. # prepend | append
# TODO - link(style) #include=true. could inc the code into the file?
# getElementById
# getElementByClass
# getElementsByTagNameNS
# TODO - get attributes by key
# TODO - get by filter .i.e. key + value?

# TODO - some kind of css renderer?
# mystyle = {"color":"white","backgroundColor": "blue","padding": "10px","fontFamily": "Arial"}
# stylesheet = f'{mystyle}'

TODO - Error handling

Traceback (most recent call last):
  File "example.py", line 15, in <module>
    a("home",href="/")
  File "/Users/byteface/Desktop/jizz/jizz/jizz.py", line 17, in __init__
    self.attributes = ''.join([ ''' %s="%s"''' % (key.split('_',1)[1], value) for key, value in kwargs.items()])
  File "/Users/byteface/Desktop/jizz/jizz/jizz.py", line 17, in <listcomp>
    self.attributes = ''.join([ ''' %s="%s"''' % (key.split('_',1)[1], value) for key, value in kwargs.items()])
IndexError: list index out of range

custom error message. 'check you have an underscore on the attribute'


Traceback (most recent call last):
  File "example.py", line 77, in <module>
    p(var(a),"(",var(b),"+",var(c),")=",var(ab),"+",var(ac)),
  File "/Users/byteface/Desktop/jizz/jizz/jizz.py", line 16, in __init__
    self.content = ''.join([each.__str__() for each in args])
  File "/Users/byteface/Desktop/jizz/jizz/jizz.py", line 16, in <listcomp>
    self.content = ''.join([each.__str__() for each in args])
TypeError: __str__() missing 1 required positional argument: 'self'

- param passed that should have been a string.



TODO - poll the source and send updates to the dom via socket? auto generate the js/python?
div("hello world", bind="http://www.somedatasource"),




- attribute for setting content. so can do _html=